# -*- coding: utf-8 -*-
"""ProyekSistemRekomendasi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10sF5ESkY9e7fzAOX3OxsrppwSgOQFDGm

#**PROYEK KEDUA MACHINE LEARNING TERAPAN**
##"SISTEM REKOMENDASI FILM"

Oleh: 
Anak Agung Sinta Trisnajayanti, 
sintatrisnajayanti@gmail.com, 
Universitas Udayana.
"""

!pip install opendatasets

import opendatasets as od

dataset_url= 'https://www.kaggle.com/clementmsika/mubi-sqlite-database-for-movie-lovers'
od.download('https://www.kaggle.com/clementmsika/mubi-sqlite-database-for-movie-lovers')

"""Menggunakan opendatasets untuk mengambil data dari kaggle

#**Import Data**
Import library yang digunakan
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

"""Kemudian mengambil dan membaca dataset dengan pd.read.csv"""

movies = pd.read_csv('/content/mubi-sqlite-database-for-movie-lovers/mubi_movie_data.csv')
ratings = pd.read_csv('/content/mubi-sqlite-database-for-movie-lovers/mubi_ratings_data.csv')

"""
Untuk melihat jumlah data pada dataset"""

movies.shape

ratings.shape

"""Karena data yang digunakan ini cukup besar maka disini menggunakan iloc dimana berfungsi untuk menyeleksi jumlah data """

data_movies = movies.iloc[:20000]
len(data_movies)

data_ratings = ratings.iloc[:25000]
len(data_ratings)

"""#**Data Information**

**mubi_movie_data.csv**
*	movie_id: ID yang terkait dengan film di Mubi
*	movie_title: Nama film atau judul film
*	movie_release_year: Tahun rilis film
*	movie_url: URL ke halaman film di Mubi
*	movie_title_language: Secara default, judulnya dalam bahasa Inggris.
*	movie_popularity: Jumlah pengguna Mubi yang menyukai film ini
*	movie_image_url: URL gambar ke film di Mubi
*	director_id: ID yang terkait dengan sutradara film di Mubi
*	director_name: Nama lengkap sutradara Film
*	director_url: URL ke halaman sutradara film di Mubi

**mubi_ratings_data.csv**
*	movie_id: ID film terkait dengan peringkat
*	rating_id: Peringkat ID di Mubi
*	rating_url: URL ke peringkat di Mubi
*	rating_score: Skor penilaian mulai dari 1 (terendah) hingga 5 (tertinggi)
*	rating_timestamp_utc: Stempel waktu untuk peringkat film yang dibuat oleh pengguna di Mubi
*	critic: Kritik yang dibuat oleh pengguna menilai film.
*	critic_likes: Jumlah suka terkait dengan kritik yang dibuat oleh pengguna menilai film
*	critic_comments: Jumlah komentar yang terkait dengan kritik yang dibuat oleh pengguna menilai film
*	user_id: ID yang terkait dengan peringkat pengguna film
*	user_trialist
	* 1 = pengguna adalah seorang trialist ketika dia menilai film
	* 0 = pengguna bukan seorang trialist ketika dia menilai film

Menampilkan data pada movie
"""

data_movies

data_movies.info()

"""Disini dilakukan drop kolom yang tidak digunakan agar data lebih mudah dipahami"""

data_movies.drop(['movie_url', 'movie_title_language',	'movie_popularity',	'movie_image_url',	'director_id',	'director_url'], inplace=True, axis=1, errors='ignore')

"""Kemudian dilakukan perubahan nama kolom pada data_movies"""

data_movies.rename(columns = {'movie_id':'Movie_ID', 'movie_title': 'Name', 'movie_release_year': 'Year', 'director_name': 'Director'},inplace = True)

"""Menampilkan hasil dari data_movies yang sudah dilakukan perubahan sebelumnya"""

data_movies

"""Menampilkan data pada rating"""

data_ratings

data_ratings.info()

"""Disini juga dilakukan drop kolom yang tidak digunakan agar data lebih mudah dipahami"""

data_ratings.drop(['rating_id', 'rating_url', 'rating_timestamp_utc',	'critic',	'critic_likes',	'critic_comments', 'user_trialist',	'user_subscriber',	'user_eligible_for_trial',	'user_has_payment_method'], inplace=True, axis=1, errors='ignore')

"""Kemudian dilakukan perubahan nama kolom pada data_ratings"""

data_ratings.rename(columns = {'movie_id':'Movie_ID', 'rating_score': 'Rating', 'user_id': 'User_ID'},inplace = True)

"""Menampilkan hasil dari data_ratings yang dilakukan perubahan sebelumnya"""

data_ratings

print("Jumlah film pada daftar film di MUBI: {}".format(len(data_movies.Movie_ID.unique())))
print("Jumlah film dalam peringkat di MUBI : {}".format(len(data_ratings.Movie_ID.unique())))

"""#**Data Understanding**
Dalam data understanding saya menggunakan visualisasi data beberapa visualisasi data
"""

data_movies.Year.describe()

"""Visualisasi data yang pertama untuk mengetahui seberapa banyak film yang rilis dari dataset tersebut. Dimana kolom Year digunakan dalam visualisasi data ini dan menggunakan histplot"""

plt.figure(figsize=(10,6))
sns.histplot(data = data_movies,x='Year',bins = 200)
plt.show()

"""Dapat dilihat pada gambar di atas bahwa mulai tahun 1990 sampai 2000an terjadi peningkatan pada grafik yang artinya pada tahun tersebut banyak film yang rilis"""

data_movies.head()

"""Menggabungkan data_ratings dan data_movie"""

df = data_ratings.merge(data_movies,how='inner',on='Movie_ID')

df.head()

movie_ratings = df.groupby('Name')['Rating'].count().reset_index().rename(columns={'Rating':'Total_rating'})

movie_ratings

"""Kemudian disini saya melakukan visualisasi data 10 besar film yang sudah dirilis menggunakan barplot. Visualisasi data ini mengambil data pengguna yang memberikan penilaian pada suatu film."""

ratings_visual = movie_ratings.sort_values(by ='Total_rating',ascending=False)
plt.figure(figsize=(15,6))
sns.barplot(x='Name',y='Total_rating',data=ratings_visual.iloc[:10,:])
plt.xticks(rotation=45)
plt.plot

"""Selanjutnya juga pada kolom director dilakukan visualisasi data untuk melihat 10 director terpopuler"""

directors = df.Director.value_counts().reset_index()
directors.columns = ['Director','count']

plt.figure(figsize = (16,8))
plt.title("10 Director Terpopuler")
sns.barplot(x = 'count', y = 'Director', data = directors.head(10), palette='icefire_r');
plt.ylabel('Director')
plt.xlabel('Count')
plt.show()

"""#**Data Preparation**
Dalam data preparation ini saya menggunakan beberapa teknik untuk memeriksa ketiga data yang saya gunakan. Data yang dimaksud yaitu pada data_movie, data_ratings, dan df (gabungan kedua data)

Teknik pertama yaitu mengecek data null karena jika ada data yang kosong atau nol akan membuat prediksi menjadi kurang akurat
"""

data_ratings.isnull().sum()

"""Output diatas menunjukkan pada kolom Rating mengandung null maka kita hapus menggunakan dataframe.dropna()"""

data_ratings = data_ratings.dropna()

data_ratings

data_movies.isnull().sum()

"""Kemudian pada data_movie tidak mengandung null maka tidak dilakukan dropna"""

data_movies

df.isnull().sum()

df = df.dropna()

df

"""Selanjutnya yaitu Encoding Data

Encoding pada User_ID
"""

# Mengubah User_ID menjadi list tanpa nilai yang sama
userid_list = df['User_ID'].unique().tolist()
print('list User_ID: ', userid_list)
print('Jumlah list User_ID: ', len(userid_list))
# Melakukan encoding User_ID
userid_encoded = {x: i for i, x in enumerate(userid_list)}
print('encoded User_ID : ', userid_encoded)
print('Jumlah encoded User_ID: ', len(userid_encoded))
# Melakukan proses encoding angka ke ke User_ID
encoded_to_user = {i: x for i, x in enumerate(userid_list)}
print('encoded angka ke User_ID: ', encoded_to_user)
print('Jumlah encoded angka ke User_ID: ', len(encoded_to_user))

"""Encoding data pada Movie_ID"""

# Mengubah Movie_ID menjadi list tanpa nilai yang sama
movieid_list = df['Movie_ID'].unique().tolist()
# Proses encoding Movie_ID
movieid_encoded = {x: i for i, x in enumerate(movieid_list)}
# Proses encoding angka ke Movie_ID
encoded_to_movie = {i: x for i, x in enumerate(movieid_list)}
# Memetakkan User_ID ke dataframe User
df['User'] = df['User_ID'].map(userid_encoded)
# Memetakkan Movie_ID ke dataframe Movie
df['Movie'] = df['Movie_ID'].map(movieid_encoded)

df

num_users = len(userid_encoded)
print(num_users)
# Mengecek jumlah user/pengguna
 
num_movie = len(encoded_to_movie)
print(num_movie)
# Mengecek jumlah film
 
# Mengubah Rating menjadi tipe data float
df['Rating'] = df['Rating'].values.astype(np.float32)

# Mengecek nilai minimum pada Rating
min_rating = min(df['Rating'])
# Mengecek nilai maksimum pada Rating
max_rating = max(df['Rating'])
 
print('Jumlah pengguna: {}, Jumlah film: {}, Min Rating: {}, Max Rating: {}'.format(
    num_users, num_movie, min_rating, max_rating
))

df = df.sample(frac=1, random_state=42)
df

"""Membagi data menjadi data train dan validasi. Dimana persentasenya yaitu 80% data train dan 20% data validasi"""

x = df[['User', 'Movie']].values
y = df['Rating'].apply(lambda x: (x - min_rating) / (max_rating - min_rating)).values

train_indices = int(0.8 * df.shape[0])
x_train, x_val, y_train, y_val = (
    x[:train_indices],
    x[train_indices:],
    y[:train_indices],
    y[train_indices:]
)

print(x,y)

"""#**Modeling**
Import library
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from keras.callbacks import  EarlyStopping

"""Untuk modeling menggunakan metode deep learning untuk sistem rekomendasi berbasis collaborative filtering dimana model ini akan menghasilkan rekomendasi untuk satu pengguna sesuai dengan penilaian sebelumnya"""

class RecommenderNet(tf.keras.Model):
  def __init__(self, num_users, num_movie, embedding_size, **kwargs):
    super(RecommenderNet, self).__init__(**kwargs)
    self.num_users = num_users
    self.num_movie = num_movie
    self.embedding_size = embedding_size
    self.user_embedding = layers.Embedding(
        num_users,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(5e-7)
    )
    self.user_bias = layers.Embedding(num_users, 1)
    self.movie_embedding = layers.Embedding(
        num_movie,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(5e-7)
    )
    self.movie_bias = layers.Embedding(num_movie, 1) 
 
  def call(self, inputs):
    user_vector = self.user_embedding(inputs[:,0]) 
    user_bias = self.user_bias(inputs[:, 0]) 
    movie_vector = self.movie_embedding(inputs[:, 1]) 
    movie_bias = self.movie_bias(inputs[:, 1]) 
 
    dot_user_movie = tf.tensordot(user_vector, movie_vector, 2) 
 
    x = dot_user_movie + user_bias + movie_bias
    
    return tf.nn.sigmoid(x)

"""Melatih model"""

model = RecommenderNet(num_users, num_movie, 50) 
 
model.compile(
    loss = tf.keras.losses.BinaryCrossentropy(),
    optimizer = keras.optimizers.SGD(learning_rate = 0.01, momentum = 0.0, nesterov = False),
    metrics=[[tf.keras.metrics.MeanAbsoluteError(),tf.keras.metrics.RootMeanSquaredError()]]
)
callbacks = EarlyStopping(
    min_delta=0.0001,
    patience=7,
    verbose=0, 
    restore_best_weights=True,
)

history = model.fit(
    x = x_train,
    y = y_train,
    batch_size = 16,
    epochs = 50,
    validation_data = (x_val, y_val),
    callbacks=[callbacks]
)

movie_df = data_movies

userId = df.User_ID.sample(1).iloc[0]
movie_visited_by_user = df[df.User_ID == userId]
 
movie_not_visited = movie_df[~movie_df['Movie_ID'].isin(movie_visited_by_user.Movie_ID.values)]['Movie_ID'] 
movie_not_visited = list(
    set(movie_not_visited)
    .intersection(set(movieid_encoded.keys()))
)

 
movie_not_visited = [[movieid_encoded.get(x)] for x in movie_not_visited]
user_encoder = userid_encoded.get(userId)
user_movie_array = np.hstack(
    ([[user_encoder]] * len(movie_not_visited), movie_not_visited)
)

"""Menampilkan rekomendasi film"""

rating_model = model.predict(user_movie_array).flatten()
 
top_ratings = rating_model.argsort()[-10:][::-1]
recommended_movie_ids = [
    encoded_to_movie.get(movie_not_visited[x][0]) for x in top_ratings
]
 
print('ID pengguna: {}'.format(userId))
print('===' * 9)
print('Film dengan rating tinggi dari pengguna')
print('----' * 8)
 
top_movie_user = (
    movie_visited_by_user.sort_values(
        by = 'Rating',
        ascending=False
    )
    .head(5)
    .Movie_ID.values
)
 
movie_df_rows = movie_df[movie_df['Movie_ID'].isin(top_movie_user)]
for row in movie_df_rows.itertuples():
    print(row.Name)
 
print('----' * 8)
print('Rekomendasi 10 film')
print('----' * 8)
 
recommended_movie = movie_df[movie_df['Movie_ID'].isin(recommended_movie_ids)]
for row in recommended_movie.itertuples():
    print(row.Name)

"""#**Evaluation**

Menampilkan visualisasi dari metriks MAE dan RMSE
"""

plt.plot(history.history['mean_absolute_error'])
plt.plot(history.history['val_mean_absolute_error'])
plt.title('metrics')
plt.ylabel('mean_absolute_error')
plt.xlabel('epoch')
plt.legend(['mean_absolute_error', 'val_mean_absolute_error'], loc='upper left')
plt.show()

plt.plot(history.history['root_mean_squared_error'])
plt.plot(history.history['val_root_mean_squared_error'])
plt.title('metrics')
plt.ylabel('root_mean_squared_error')
plt.xlabel('epoch')
plt.legend(['root_mean_squared_error', 'val_root_mean_squared_error'], loc='upper left')
plt.show()